/**
 * This file was generated by:
 *   relay-compiler
 *
 * @providesModule partnerListQuery.graphql
 * @generated SignedSource<<548ef45ff84384bc551b841b99ca9089>>
 * @relayHash f9ecaed50e6867c6da53efdd8741add0
 * @flow
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type {ConcreteBatch} from 'relay-runtime';

*/


/*
query partnerListQuery(
  $claimGreaterThan: Int!
) {
  partnerWithClaimGreaterThan(value: $claimGreaterThan) {
    partnerNumber
    ...partnerListEntry
  }
}

fragment partnerListEntry on Partner {
  partnerNumber
  firstname
  lastname
  myClaims {
    claimsSum
  }
}
*/

const batch /*: ConcreteBatch*/ = {
  "fragment": {
    "argumentDefinitions": [
      {
        "kind": "LocalArgument",
        "name": "claimGreaterThan",
        "type": "Int!",
        "defaultValue": null
      }
    ],
    "kind": "Fragment",
    "metadata": null,
    "name": "partnerListQuery",
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Variable",
            "name": "value",
            "variableName": "claimGreaterThan",
            "type": "Int!"
          }
        ],
        "concreteType": "Partner",
        "name": "partnerWithClaimGreaterThan",
        "plural": true,
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": null,
            "name": "partnerNumber",
            "storageKey": null
          },
          {
            "kind": "FragmentSpread",
            "name": "partnerListEntry",
            "args": null
          }
        ],
        "storageKey": null
      }
    ],
    "type": "Query"
  },
  "id": null,
  "kind": "Batch",
  "metadata": {},
  "name": "partnerListQuery",
  "query": {
    "argumentDefinitions": [
      {
        "kind": "LocalArgument",
        "name": "claimGreaterThan",
        "type": "Int!",
        "defaultValue": null
      }
    ],
    "kind": "Root",
    "name": "partnerListQuery",
    "operation": "query",
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Variable",
            "name": "value",
            "variableName": "claimGreaterThan",
            "type": "Int!"
          }
        ],
        "concreteType": "Partner",
        "name": "partnerWithClaimGreaterThan",
        "plural": true,
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": null,
            "name": "partnerNumber",
            "storageKey": null
          },
          {
            "kind": "InlineFragment",
            "type": "Partner",
            "selections": [
              {
                "kind": "ScalarField",
                "alias": null,
                "args": null,
                "name": "firstname",
                "storageKey": null
              },
              {
                "kind": "ScalarField",
                "alias": null,
                "args": null,
                "name": "lastname",
                "storageKey": null
              },
              {
                "kind": "LinkedField",
                "alias": null,
                "args": null,
                "concreteType": "Claims",
                "name": "myClaims",
                "plural": true,
                "selections": [
                  {
                    "kind": "ScalarField",
                    "alias": null,
                    "args": null,
                    "name": "claimsSum",
                    "storageKey": null
                  }
                ],
                "storageKey": null
              }
            ]
          }
        ],
        "storageKey": null
      }
    ]
  },
  "text": "query partnerListQuery(\n  $claimGreaterThan: Int!\n) {\n  partnerWithClaimGreaterThan(value: $claimGreaterThan) {\n    partnerNumber\n    ...partnerListEntry\n  }\n}\n\nfragment partnerListEntry on Partner {\n  partnerNumber\n  firstname\n  lastname\n  myClaims {\n    claimsSum\n  }\n}\n"
};

module.exports = batch;
